name: 'Publish New Release'
run-name: Release ${{ github.action_ref }}
on:
  workflow_dispatch:
    inputs:
      releaseId:
        description: 'Release ID'
        required: true

jobs:
  check-release:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: Get current version
        run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV
      - name: Check valid release_id
        uses: actions/github-script@v6
        env:
          release_id: ${{ github.event.inputs.releaseId }}
        with:
          script: |
            await github.rest.repos.getRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: process.env.release_id
            })
      - name: Check version already exists
        uses: actions/github-script@v6
        with:
          script: |
            const current_tag = `v${process.env.PACKAGE_VERSION}`
            const latest = await github.rest.repos.getLatestRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
            })

            if (current_tag == latest.data.tag_name) {
              process.exit(1)
            }

  build-app:
    needs: [check-release]
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-20.04, windows-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v3
      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf
      - name: install pnpm
        run: npm install -g pnpm
      - name: install frontend dependencies
        run: pnpm install
      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          releaseId: ${{ github.event.inputs.releaseId }}

  publish-release:
    permissions:
      contents: write
    runs-on: ubuntu-20.04
    needs: [build-app, check-release]

    steps:
      - name: publish release
        id: publish-release
        uses: actions/github-script@v6
        env:
          release_id: ${{ github.event.inputs.releaseId }}
        with:
          script: |
            github.rest.repos.updateRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: process.env.release_id,
                draft: false,
                prerelease: false,
                make_latest: true,
              })

  update-gist:
    needs: [check-release, build-app, publish-release]
    runs-on: ubuntu-20.04
    steps:
      - name: get latest.json download url
        id: get-download-url
        uses: actions/github-script@v6
        with:
          script: |
            const latest = await github.rest.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
            })
            const update = latest.data.assets.find(a => a.name.includes("latest.json"))
            return update.browser_download_url
      - name: download latest.json
        run: wget ${{ steps.get-download-url.outputs.result }} -O ./business-app-updater.json
      - name: upload to gist
        uses: exuanbo/actions-deploy-gist@v1
        with:
          token: ${{ secrets.TOKEN }}
          gist_id: 3b82934f8560db6e988c49c22977c90f
          file_path: ./business-app-updater.json
          file_type: text