name: 'publish'
on:
  push:
    branches:
      - main

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-20.04
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}

    steps:
      - uses: actions/checkout@v3
      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: get version
        run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV
      - name: create release
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `app-v${process.env.PACKAGE_VERSION}`,
              name: `Desktop App v${process.env.PACKAGE_VERSION}`,
              body: 'Take a look at the assets to download and install this app.',
              draft: true,
              prerelease: false
            })
            return data.id

  build-app:
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-20.04, windows-latest]

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v3
      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf
      - name: install pnpm
        run: npm install -g pnpm
      - name: install frontend dependencies
        run: pnpm install
      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}

  publish-release:
    permissions:
      contents: write
    runs-on: ubuntu-20.04
    needs: [create-release, build-app]

    steps:
      - name: draft latest release
        uses: actions/github-script@v6
        with:
          script: |
            const latest = await github.rest.repos.getLatestRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
            })

            await github.rest.repos.updateRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: latest.data.id,
                draft: true,
            })

      - name: publish release
        id: publish-release
        uses: actions/github-script@v6
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            github.rest.repos.updateRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: process.env.release_id,
                draft: false,
                prerelease: false,
                make_latest: true,
              })

  update-gist:
    needs: [create-release, build-app, publish-release]
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: install pnpm
        run: npm install -g pnpm
      - name: install frontend dependencies
        run: pnpm install
      - uses: actions/github-script@v6
        name: Generate Updater Data
        id: generate-updater-data
        env:
          GITHUB_AUTH_TOKEN: ${{ secrets.TOKEN }}
          RELEASE_ID: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            const script = require('./scripts/github-gist-updater-script.js')
            await script({github, context, core, fetch})
      - uses: "finnp/create-file-action@master"
        env:
          FILE_NAME: "updater.json"
          FILE_DATA: ${{steps.generate-updater-data.outputs.updaterData}}
      - name: Deploy
        uses: exuanbo/actions-deploy-gist@v1
        with:
          token: ${{ secrets.TOKEN }}
          gist_id: 3b82934f8560db6e988c49c22977c90f
          file_path: ./updater.json
          file_type: text
